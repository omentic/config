# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. To get a full list of supported fonts use the `kitty
#: +list-fonts` command. By default they are derived automatically, by
#: the OSes font system. When bold_font or bold_italic_font is set to
#: auto on macOS, the priority of bold fonts is semi-bold, bold,
#: heavy. Setting them manually is useful for font families that have
#: many weight variants like Book, Medium, Thick, etc. For example::

#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic

# note: no spaces in font names
font_family      monospace, Symbola, Noto
bold_font        auto
italic_font      auto
bold_italic_font auto

#: Font size (in pts)
font_size 11.0

force_ltr no

adjust_line_height  0
adjust_column_width 0
adjust_baseline 0

disable_ligatures never

#: Choose exactly which OpenType features to enable or disable.
# font_features

#: Modify font characteristics such as the position or thickness of
#: the underline and strikethrough. The modifications can have the
#: suffix px for pixels or % for percentage of original value.
#: No suffix means use pts.
# modify_font

#: The sizes of the lines used for the box drawing Unicode characters.
#: These values are in pts. They will be scaled by the monitor DPI to
#: arrive at a pixel value. There must be four values corresponding to
#: thin, normal, thick, and very thick lines.
box_drawing_scale 0.001, 1, 1.5, 2

#: }}}

#: Cursor customization {{{

#: Default cursor color.
cursor #cccccc

#: The color of text under the cursor.
cursor_text_color #111111

#: The cursor shape can be one of block, beam, underline.
cursor_shape block

#: The thickness of the beam cursor (in pts).
cursor_beam_thickness 1.5

#: The thickness of the underline cursor (in pts).
cursor_underline_thickness 2.0

#: The interval to blink the cursor (in seconds). Set to zero to
#: disable blinking. Negative values mean use system default.
cursor_blink_interval -1

#: Stop blinking cursor after the specified number of seconds of
#: keyboard inactivity. Set to zero to never stop blinking.
cursor_stop_blinking_after 30.0

#: }}}

#: Scrollback {{{

scrollback_lines 2000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. Similarly CURSOR_LINE and
#: CURSOR_COLUMN will be replaced by the current cursor position or
#: set to 0 if there is no cursor, for example, when showing the last
#: command output.

scrollback_pager_history_size 0

#: Separate scrollback history size (in MB), used only for browsing
#: the scrollback buffer with pager. This separate buffer is not
#: available for interactive scrolling but will be piped to the pager
#: program when viewing scrollback buffer in a separate window. The
#: current implementation stores the data in UTF-8, so approximatively
#: 10000 lines per megabyte at 100 chars per line, for pure ASCII,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

scrollback_fill_enlarged_window no

#: Fill new space with lines from the scrollback buffer after
#: enlarging a window.

wheel_scroll_multiplier 5.0

#: Multiplier for the number of lines scrolled by the mouse wheel.
#: Note that this is only used for low precision scrolling devices,
#: not for high precision scrolling devices on platforms such as macOS
#: and Wayland. Use negative numbers to change scroll direction. See
#: also wheel_scroll_min_lines.

wheel_scroll_min_lines 1

#: The minimum number of lines scrolled by the mouse wheel. The scroll
#: multiplier wheel_scroll_multiplier only takes effect after it
#: reaches this number. Note that this is only used for low precision
#: scrolling devices like wheel mice that scroll by very small amounts
#: when using the wheel. With a negative number, the minimum number of
#: lines will always be added.

touch_scroll_multiplier 1.0

#: Multiplier for the number of lines scrolled by a touchpad. Note
#: that this is only used for high precision scrolling devices on
#: platforms such as macOS and Wayland. Use negative numbers to change
#: scroll direction.

#: }}}

#: Mouse {{{

mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text. Disabled by default on macOS as getting it to work
#: robustly with the ever-changing sea of bugs that is Cocoa is too
#: much effort.

url_color #0087bd
url_style single

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, straight, double, curly, dotted, dashed.

open_url_with default

#: The program to open clicked URLs. The special value default means
#: to use the operating system's default URL handler (xdg-open).

url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.

detect_urls yes

#: Detect URLs under the mouse. Detected URLs are highlighted with an
#: underline and the mouse cursor becomes a hand over them. Even if
#: this option is disabled, URLs are still clickable.

# url_excluded_characters

#: Additional characters to be disallowed from URLs, when detecting
#: URLs under the mouse cursor. By default, all characters that are
#: legal in URLs are allowed.

copy_on_select no

#: Copy to clipboard or a private buffer on select.

paste_actions quote-urls-at-prompt

#: A comma separated list of actions to take when pasting text into
#: the terminal. The supported paste actions are:

#: quote-urls-at-prompt:
#:     If the text being pasted is a URL and the cursor is at a shell prompt,
#:     automatically quote the URL (needs shell_integration).
#: confirm:
#:     Confirm the paste if bracketed paste mode is not active or there is more
#:     a large amount of text being pasted.
#: filter:
#:     Run the filter_paste() function from the file paste-actions.py in
#:     the kitty config directory on the pasted text. The text returned by the
#:     function will be actually pasted.

strip_trailing_spaces never

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. A value of always will always do it.

select_by_word_characters @-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the Unicode database will be matched.

# select_by_word_characters_forward

#: Characters considered part of a word when extending the selection
#: forward on double clicking. In addition to these characters any
#: character that is marked as an alphanumeric character in the
#: Unicode database will be matched.

#: If empty (default) select_by_word_characters will be used for both
#: directions.

click_interval -1.0

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around.

pointer_shape_when_grabbed arrow

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse. Valid values are: arrow, beam and hand.

default_pointer_shape beam

#: The default shape of the mouse pointer. Valid values are: arrow,
#: beam and hand.

pointer_shape_when_dragging beam

#: The default shape of the mouse pointer when dragging across text.
#: Valid values are: arrow, beam and hand.

#: Mouse actions {{{

#: Mouse buttons can be mapped to perform arbitrary actions. The
#: syntax is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: Where button-name is one of left, middle, right, b1 ... b8 with
#: added keyboard modifiers. For example: ctrl+shift+left refers to
#: holding the Ctrl+Shift keys while clicking with the left mouse
#: button. The value b1 ... b8 can be used to refer to up to eight
#: buttons on a mouse.

#: event-type is one of press, release, doublepress, triplepress,
#: click, doubleclick. modes indicates whether the action is performed
#: when the mouse is grabbed by the program running in the terminal,
#: or not. The values are grabbed or ungrabbed or a comma separated
#: combination of them. grabbed refers to when the program running in
#: the terminal has requested mouse events. Note that the click and
#: double click events have a delay of click_interval to disambiguate
#: from double and triple presses.

#: You can run kitty with the kitty --debug-input command line option
#: to see mouse events. See the builtin actions below to get a sense
#: of what is possible.

#: If you want to unmap an action, map it to no_op. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed no_op

#: See all the mappable actions including mouse actions here
#: <https://sw.kovidgoyal.net/kitty/actions/>.

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

# TODO: change me
mouse_map left click ungrabbed mouse_click_url_or_select
mouse_map shift+left click grabbed,ungrabbed mouse_click_url_or_select
mouse_map ctrl+left release grabbed,ungrabbed mouse_click_url

#: Variant with Ctrl+Shift is present because the simple click based
#: version has an unavoidable delay of click_interval, to disambiguate
#: clicks from double clicks.

mouse_map ctrl+shift+left press grabbed discard_event

#: Prevent this press event from being sent to the program that has
#: grabbed the mouse, as the corresponding release event is used to
#: open a URL.

mouse_map middle release ungrabbed paste_from_selection

# TODO: change me
mouse_map left press ungrabbed mouse_selection normal
mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle
mouse_map left doublepress ungrabbed mouse_selection word
mouse_map left triplepress ungrabbed mouse_selection line
mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#: Select from the clicked point to the end of the line

mouse_map right press ungrabbed mouse_selection extend

#: If you want only the end of the selection to be moved instead of
#: the nearest boundary, use move-end instead of extend.

mouse_map shift+middle        release ungrabbed,grabbed paste_selection
mouse_map shift+ctrl+alt+left press ungrabbed,grabbed mouse_selection rectangle

# Shift+Left
mouse_map shift+left          press ungrabbed,grabbed mouse_selection extend
mouse_map shift+left          doublepress ungrabbed,grabbed mouse_selection word
mouse_map shift+left          triplepress ungrabbed,grabbed mouse_selection line

#: Select the entire line

mouse_map shift+ctrl+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#: Select from the clicked point to the end of the line

mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

#: }}}

#: }}}

#: Performance tuning {{{

repaint_delay 10

#: Delay (in milliseconds) between screen updates. Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate. Also, to minimize latency when there is pending input to be
#: processed, repaint_delay is ignored.

input_delay 3

#: Delay (in milliseconds) before input from the program running in
#: the terminal is processed. Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents screen tearing
#: <https://en.wikipedia.org/wiki/Screen_tearing> when scrolling.
#: However, it limits the rendering speed to the refresh rate of your
#: monitor. With a very high speed mouse/high keyboard repeat rate,
#: you may notice some slight input latency. If so, set this to no.

#: }}}

#: Terminal bell {{{

#: Enable/disable the audio bell.
enable_audio_bell yes

#: The visual bell duration (in seconds). Flash the screen when a bell
#: occurs for the specified number of seconds. Set to zero to disable.
visual_bell_duration 0.0

#: The color used by visual bell.
#: Set to none will fall back to selection background color.
visual_bell_color none

#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on linux.
window_alert_on_bell yes

#: Some text or a Unicode symbol to show on the tab if a window in the
#: tab that does not have focus has a bell. If you want to use leading
#: or trailing spaces, surround the text with quotes.
bell_on_tab "🔔 "

#: Program to run when a bell occurs. The environment variable
#: KITTY_CHILD_CMDLINE can be used to get the program running in the
#: window in which the bell occurred.
command_on_bell none

#: Path to a sound file to play as the bell sound. If set to none, the
#: system default bell sound is used. Must be in WAV or OGA format.
bell_path none

#: }}}

#: Window layout {{{

remember_window_size  no
initial_window_width   960
initial_window_height  552
#initial_window_width  750
#initial_window_height 450
#initial_window_width  640
#initial_window_height 400

#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

enabled_layouts *

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the layouts <https://sw.kovidgoyal.net/kitty/overview/#layouts>.

window_resize_step_cells 2
window_resize_step_lines 2

#: The step size (in units of cell width/cell height) to use when
#: resizing kitty windows in a layout with the shortcut
#: start_resizing_window. The cells value is used for horizontal
#: resizing, and the lines value is used for vertical resizing.

window_border_width 0.5pt

#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified, the unit is assumed
#: to be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.

draw_minimal_borders yes

#: Draw only the minimum borders needed. This means that only the
#: borders that separate the inactive window from a neighbor are
#: drawn. Note that setting a non-zero window_margin_width overrides
#: this and causes all borders to be drawn.

window_margin_width 5

#: The window margin (in pts) (blank area outside the border). A
#: single value sets all four sides. Two values set the vertical and
#: horizontal sides. Three values set top, horizontal and bottom. Four
#: values set top, right, bottom and left.

single_window_margin_width -1

#: The window margin to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_margin_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.

window_padding_width 0

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.

placement_strategy center

#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be
#: only at the bottom and right edges.

active_border_color #00ff00

#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.

inactive_border_color #cccccc

#: The color for the border of inactive windows.

bell_border_color #ff5a00

#: The color for the border of inactive windows in which a bell has
#: occurred.

inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

hide_window_decorations no

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only can be used to only hide the titlebar.
#: Whether this works and exactly what effect it has depends on the
#: window manager/operating system. Note that the effects of changing
#: this option when reloading config are undefined.

window_logo_path none

#: Path to a logo image. Must be in PNG format. Relative paths are
#: interpreted relative to the kitty config directory. The logo is
#: displayed in a corner of every kitty window. The position is
#: controlled by window_logo_position. Individual windows can be
#: configured to have different logos either using the launch action
#: or the remote control <https://sw.kovidgoyal.net/kitty/remote-
#: control/> facility.

window_logo_position bottom-right

#: Where to position the window logo in the window. The value can be
#: one of: top-left, top, top-right, left, center, right, bottom-left,
#: bottom, bottom-right.

window_logo_alpha 0.5

#: The amount the logo should be faded into the background. With zero
#: being fully faded and one being fully opaque.

resize_debounce_time 0.1

#: The time to wait before redrawing the screen when a resize event is
#: received (in seconds). On platforms such as macOS, where the
#: operating system sends events corresponding to the start and end of
#: a resize, this number is ignored.

resize_draw_strategy static

#: Choose how kitty draws a window while a resize is in progress. A
#: value of static means draw the current window contents, mostly
#: unchanged. A value of scale means draw the current window contents
#: scaled. A value of blank means draw a blank window. A value of size
#: means show the window size in cells.

resize_in_steps no

#: Resize the OS window in steps as large as the cells, instead of
#: with the usual pixel accuracy. Combined with initial_window_width
#: and initial_window_height in number of cells, this option can be
#: used to keep the margins as small as possible when resizing the OS
#: window. Note that this does not currently work on Wayland.

visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ

#: The list of characters for visual window selection. For example,
#: for selecting a window to focus on with focus_visible_window. The
#: value should be a series of unique numbers or alphabets, case
#: insensitive, from the set [0-9A-Z]. Specify your preference as a
#: string of characters.

confirm_os_window_close 0

#: Ask for confirmation when closing an OS window or a tab with at
#: least this number of kitty windows in it. A value of zero disables
#: confirmation. Negative values means windows sitting at a shell prompt
#: are not counted, only windows where some command is currently running.

#: }}}

#: Tab bar {{{

tab_bar_edge top

#: The edge to show the tab bar on, top or bottom.

tab_bar_margin_width 0.0

#: The margin to the left and right of the tab bar (in pts).

tab_bar_margin_height 0.0 0.0

#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar.
#: The second number is the margin between the tab bar and the
#: contents of the current tab.

tab_bar_style fade

#: The tab bar style.
#: Can be one of: fade, slant, separator, powerline, custom, hidden.

tab_bar_align left

#: The horizontal alignment of the tab bar, can be one of: left,
#: center, right.

tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown.

tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of right will switch to the tab to the right of
#: the closed tab. A value of last will switch to the right-most tab.

tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

tab_separator " ┇"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

tab_powerline_style angled

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

tab_activity_symbol none

#: Some text or a Unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. If you want to use
#: leading or trailing spaces surround the text with quotes.

tab_title_template "{title}"

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:{title}.
#: Useful if you have shortcuts mapped for goto_tab N. If you prefer
#: to see the index as a superscript, use {sup.index}.

active_tab_title_template none

#: Template to use for active tabs. If not specified falls back to
#: tab_title_template.

#: Tab bar colors and styles
active_tab_foreground   #000
active_tab_background   #eee
active_tab_font_style   bold-italic
inactive_tab_foreground #444
inactive_tab_background #999
inactive_tab_font_style normal

#: Background color for the tab bar.
#: Defaults to using the terminal background color.
tab_bar_background none

#: Color for the tab bar margin area.
#: Defaults to using the terminal background color.
tab_bar_margin_color none

#: }}}

#: Color scheme {{{

#: The foreground and background colors
foreground #CFD8DC
background #2F343F
#263238

#: The opacity of the background. A number between zero and one,
#: where one is opaque and zero is fully transparent.
background_opacity 0.95
#0.80

#: Path to a background image. Must be in PNG format.
background_image none

#: Whether to tile, scale or clamp the background image.
#: The value can be one of tiled, mirror-tiled, scaled, clamped.
background_image_layout tiled

#: When background image is scaled, whether linear interpolation
#: should be used.
background_image_linear no

#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.
dynamic_background_opacity no

#: How much to tint the background image by the background color. The
#: tint is applied only under the text area, not margin/borders. Makes
#: it easier to read the text. Tinting is done using the current
#: background color for each window.
background_tint 0.0

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).
dim_opacity 0.75

#: The foreground and background colors for text selected with the
#: mouse. Setting both of these to none will cause a "reverse video"
#: effect for selections, where the selection will be the cell text
#: color and the text will become the cell background color.
selection_foreground #CFD8DC
selection_background #5294E2

#: The color table {{{

#: The 256 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version, for the first 16 colors. You can set the
#: remaining 240 colors as color16 to color255.

#: black
color0 #2F343F
#263238
color8 #000000

#: red
color1 #FF5555
color9 #FF5555

#: green
color2  #55FF55
color10 #55FF55

#: yellow
color3  #FFFF55
color11 #FFFF55

#: blue
color4  #00AFFF
#353945
color12 #00AAFF
#5555FF

#: magenta
color5  #FF55FF
color13 #FF55FF

#: cyan
color6  #55FFFF
color14 #55FFFF

#: white
color7  #AAAAAA
color15 #FFFFFF

#: Color for marks of type 1
mark1_foreground black

#: Color for marks of type 1 (light steel blue)
mark1_background #98d3cb

#: Color for marks of type 2
mark2_foreground black

#: Color for marks of type 1 (beige)
mark2_background #f2dcd3

#: Color for marks of type 3
mark3_foreground black

#: Color for marks of type 3 (violet)
mark3_background #f274bc

#: }}}

#: }}}

#: Advanced {{{

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
shell .

#: The terminal based text editor (such as vim or nano) to use.
#: The default value of . means to use the environment variables
#: VISUAL and EDITOR in that order.
editor .

#: Close the window when the child process (shell) exits.
close_on_child_death no

#: Allow other programs to control kitty using passwords.
# remote_control_password

#: Allow other programs to control kitty.
allow_remote_control yes

#: Listen to the specified UNIX socket for remote control connections.
# listen_on unix:/tmp/kitty

#: Specify the environment variables to be set in all child processes.
# env

#: Path to python file which will be loaded for watchers
#: <https://sw.kovidgoyal.net/kitty/launch/#watchers>.
# watcher

#: Control where kitty finds the programs to run.
# exe_search_path

#: The interval to periodically check if an update to kitty is available.
update_check_interval 0

#: Path to a session file to use for all kitty instances.
startup_session none

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed.
clipboard_control write-clipboard write-primary

#: The maximum size (in MB) of data from programs running in kitty
#: that will be stored for writing to the system clipboard. A value of
#: zero means no size limit is applied. See also clipboard_control.
clipboard_max_size 0

#: The password that can be supplied to the file transfer kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/transfer/> to skip the
#: transfer confirmation prompt. This should only be used when
#: initiating transfers from trusted computers, over trusted networks
#: or encrypted transports, as it allows any programs running on the
#: remote machine to read/write to the local filesystem, without
#: permission.
# file_transfer_confirmation_bypass

#: Process hyperlink escape sequences (OSC 8).
allow_hyperlinks yes

#: Enable shell integration on supported shells. See Shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> for details.
shell_integration enabled

#: Control whether programs running in the terminal can request new
#: windows to be created. The canonical example is clone-in-kitty
#: <https://sw.kovidgoyal.net/kitty/shell-integration/#clone-shell>.
allow_cloning ask

#: Control what shell code is sourced when running clone-in-kitty in
#: the newly cloned window.
#: The supported strategies are: venv, conda, env_var, path.
clone_source_strategies venv,conda,env_var,path

#: The value of the TERM environment variable to set.
term xterm-kitty

#: }}}

#: OS specific tweaks {{{

wayland_titlebar_color #2F343F

#: Choose between Wayland and X11 backends. One of x11, wayland, auto.
# Client Side Decorations suck ass
linux_display_server x11

#: }}}

#: Keyboard shortcuts {{{

#: Keys are identified simply by their lowercase Unicode characters.
#: For example: a for the A key, [ for the left square bracket key,
#: etc. For functional keys, such as Enter or Escape, the names are
#: present at Functional key definitions
#: <https://sw.kovidgoyal.net/kitty/keyboard-protocol/#functional>.
#: For modifier keys, the names are ctrl (control, ⌃), shift (⇧), alt
#: (opt, option, ⌥), super (cmd, command, ⌘). See also: GLFW mods
#: <https://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/include/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you can only use an XKB key
#: name for keys that are not known as GLFW keys.

#: Finally, you can use raw system key codes to map keys, again only
#: for keys that are not known as GLFW keys. To see the system key
#: code for a key, start kitty with the kitty --debug-input option,
#: kitty will output some debug text for every key event. In that text
#: look for native_code, the value of that becomes the key name in the
#: shortcut.

kitty_mod ctrl+alt

#: You can create aliases for kitten names, this allows overriding the
#: defaults for kitten options and can also be used to shorten
#: repeated mappings of the same kitten with a specific group of
#: options. For example, the above alias changes the default value of
#: kitty +kitten hints --hints-offset to zero for all mappings,
#: including the builtin ones.

# kitten_alias hints hints --hints-offset=0

#: Clipboard {{{

map ctrl+c copy_or_interrupt
map ctrl+shift+c copy_to_clipboard

# map ctrl+v		paste_from_clipboard
map ctrl+shift+v paste_from_clipboard
map ctrl+shift+s paste_from_selection

#: }}}

#: Scrolling {{{

# FIXME: scroll_line does not work??
map kitty_mod+up        scroll_page_up
map kitty_mod+down      scroll_page_down
map kitty_mod+page_up   scroll_to_prompt -1
map kitty_mod+page_down scroll_to_prompt +1
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
# TODO: use this more
map kitty_mod+h         show_scrollback

#: You can pipe the contents of the current screen and history
#: buffer as STDIN to an arbitrary program using launch --stdin-
#: source. For example, the following opens the scrollback buffer in
#: less in an overlay window::

#:     map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#: For more details on piping screen and buffer contents to external
#: programs, see launch <https://sw.kovidgoyal.net/kitty/launch/>.

#: }}}

#: Window management {{{

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      launch mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    launch --cwd=current

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter launch --allow-remote-control some_program

#: You can open a new window next to the currently active window or as
#: the first window, with::

#:     map ctrl+n launch --location=neighbor some_program
#:     map ctrl+f launch --location=first some_program

#: For more details, see launch.

map super+shift+enter new_os_window_with_cwd

#: Works like new_window above, except that it opens a top level OS
#: kitty window. In particular you can use new_os_window_with_cwd to
#: open a window with the current working directory.

map kitty_mod+enter new_window
map kitty_mod+n new_window
map kitty_mod+w close_window
map kitty_mod+] next_window
map kitty_mod+[ previous_window
map kitty_mod+f move_window_forward
map kitty_mod+b move_window_backward
map kitty_mod+` move_window_to_top
map kitty_mod+r start_resizing_window
map kitty_mod+1 first_window
map kitty_mod+2 second_window
map kitty_mod+3 third_window
map kitty_mod+4 fourth_window
map kitty_mod+5 fifth_window
map kitty_mod+6 sixth_window
map kitty_mod+7 seventh_window
map kitty_mod+8 eighth_window
map kitty_mod+9 ninth_window
map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{

map kitty_mod+right next_tab
map kitty_mod+left  previous_tab
map kitty_mod+t     new_tab
map kitty_mod+q     close_tab
map kitty_mod+.     move_tab_forward
map kitty_mod+,     move_tab_backward

#: }}}

#: Layout management {{{

map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout

#: There is also a toggle layout function that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

map ctrl+shift+equal     change_font_size all +1.0
map ctrl+shift+minus     change_font_size all -1.0
map ctrl+shift+backspace change_font_size all 0

#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.
map kitty_mod+e open_url_with_hints

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.
map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and open it with the default open program.
map kitty_mod+p>shift+f kitten hints --type path

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1
map kitty_mod+p>l kitten hints --type line --program -

#: Select words and insert into terminal.
map kitty_mod+p>w kitten hints --type word --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits
map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like filename:linenum and open it in
#: vim at the specified line number.
map kitty_mod+p>n kitten hints --type linenum

#: Select a hyperlink (i.e. a URL that has been marked as such by the
#: terminal program, for example, by ls --hyperlink=auto).
map kitty_mod+p>y kitten hints --type hyperlink

#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

map kitty_mod+u      kitten unicode_input
map kitty_mod+escape kitty_shell window

#map kitty_mod+a>m    set_background_opacity +0.1
#map kitty_mod+a>l    set_background_opacity -0.1
#map kitty_mod+a>1    set_background_opacity 1
#map kitty_mod+a>d    set_background_opacity default
map kitty_mod+delete clear_terminal reset active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen, for example, for ZSH add the
#: following to ~/.zshrc:

#: .. code-block:: sh

#:     scroll-and-clear-screen() {
#:         printf '\n%.0s' {1..$LINES}
#:         zle clear-screen
#:     }
#:     zle -N scroll-and-clear-screen
#:     bindkey '^l' scroll-and-clear-screen

#: Show details about exactly what configuration kitty is running with
#: and its host environment. Useful for debugging issues.
map kitty_mod+f6 debug_config

#: }}}

#: }}}
